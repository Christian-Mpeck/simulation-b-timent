import random
import string
import time
import pandas as pd
from datetime import datetime, timedelta
from pathlib import Path

# === Fonction pour générer un ID de boîtier ===
def generate_boite_id():
    return ''.join(random.choices('0123456789', k=4)) + random.choice(string.ascii_uppercase)

# === Fonction pour configurer les boîtiers ===
def parametres_boitiers():
    configuration_boitiers = {}
    n_boitiers = int(input("Entrez le nombre de boîtiers à paramétrer : "))
    boitiers_ids = [generate_boite_id() for _ in range(n_boitiers)]

    for i, boite_id in enumerate(boitiers_ids):
        print(f"\nConfiguration pour le boîtier {i+1} (ID: {boite_id}) :")
        n_intensite = int(input("  Entrez le nombre de mesures d'intensité à configurer : "))

        liste_intensites = [f"I{j}" for j in range(1, n_intensite+1)]
        liste_tensions = [f"U{k}" for k in range(1, 4)]

        configuration_boitiers[boite_id] = {
            "nombre_intensites": n_intensite,
            "intensites": liste_intensites,
            "tensions": liste_tensions
        }
    
    return configuration_boitiers

# === Création des dossiers et fichiers pour les boîtiers ===
def create_directories_and_files(configuration_boitiers, base_dir_path):
    base_dir_path.mkdir(parents=True, exist_ok=True)
    
    for boite_id in configuration_boitiers.keys():
        dossier_boite = base_dir_path / boite_id
        dossier_boite.mkdir(exist_ok=True)
        fichier_mesures = dossier_boite / "mesures.txt"

        with fichier_mesures.open(mode="w", encoding="utf-8") as f:
            f.write(f"Mesures pour le boîtier {boite_id}\n")
            f.write("Date & Heure, " + ", ".join(configuration_boitiers[boite_id]["tensions"] + configuration_boitiers[boite_id]["intensites"]) + "\n")
    
    print("Dossiers et fichiers créés avec succès.")

# === Fonction pour générer des valeurs de tension et d’intensité ===
def generate_tension():
    return [round(random.uniform(220, 240), 2) for _ in range(3)]

def generate_intensite(n_intensite):
    valeurs = []
    for _ in range(n_intensite):
        heure = datetime.now().hour
        if 6 <= heure < 9:
            valeurs.append(round(random.uniform(5, 20), 2))
        elif 9 <= heure < 18:
            valeurs.append(round(random.uniform(10, 30), 2))
        elif 18 <= heure < 23:
            valeurs.append(round(random.uniform(8, 25), 2))
        else:
            valeurs.append(round(random.uniform(3, 10), 2))
    return valeurs

# === Simulation des mesures et écriture dans les fichiers texte ===
def run_simulation(configuration_boitiers, base_dir_path):
    lancer = input("Voulez-vous lancer la simulation ? (oui/non) : ").strip().lower()
    if lancer != "oui":
        print("Simulation annulée.")
        return
    
    duree_simulation = int(input("Entrez la durée de simulation en minutes : "))
    fin_simulation = datetime.now() + timedelta(minutes=duree_simulation)

    print(f"\nSimulation en cours pendant {duree_simulation} minutes...\n")

    while datetime.now() < fin_simulation:
        for boite_id, config in configuration_boitiers.items():
            fichier_mesures = base_dir_path / boite_id / "mesures.txt"
            horodatage = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            valeurs_tension = generate_tension()
            valeurs_intensite = generate_intensite(config["nombre_intensites"])

            ligne_mesure = f"{horodatage}, " + ", ".join(map(str, valeurs_tension + valeurs_intensite)) + "\n"
            
            with fichier_mesures.open(mode="a", encoding="utf-8") as f:
                f.write(ligne_mesure)

        print(f"Mesures enregistrées à {datetime.now().strftime('%H:%M:%S')}")
        time.sleep(10 * 60)

    print("\nSimulation terminée. Les mesures ont été enregistrées.")

# === Fonction pour exporter les mesures des dernières 24h en Excel ===
def export_to_excel(configuration_boitiers, base_dir_path):
    now = datetime.now()
    yesterday = now - timedelta(days=1)
    date_hier_str = yesterday.strftime("%d%m%Y")  # Format : JJMMYYYY

    for boite_id in configuration_boitiers.keys():
        dossier_boite = base_dir_path / boite_id
        fichier_mesures = dossier_boite / "mesures.txt"
        fichier_excel = dossier_boite / f"{boite_id}{date_hier_str}.xlsx"

        if not fichier_mesures.exists():
            print(f"Aucun fichier de mesures trouvé pour le boîtier {boite_id}.")
            continue

        # Lire les données du fichier texte
        with fichier_mesures.open(mode="r", encoding="utf-8") as f:
            lignes = f.readlines()

        if len(lignes) < 3:
            print(f"Pas assez de données pour exporter le boîtier {boite_id}.")
            continue

        # Extraire les en-têtes et les données
        categories = lignes[1].strip().split(", ")
        data = [line.strip().split(", ") for line in lignes[2:] if yesterday.strftime("%Y-%m-%d") in line]

        if not data:
            print(f"Aucune donnée pour les dernières 24h pour le boîtier {boite_id}.")
            continue

        # Créer le DataFrame
        df = pd.DataFrame(data, columns=categories)

        # Écriture dans Excel
        with pd.ExcelWriter(fichier_excel, engine="xlsxwriter") as writer:
            df.to_excel(writer, index=False, sheet_name="Mesures")
            worksheet = writer.sheets["Mesures"]
            worksheet.write("A1", f"Boîtier : {boite_id}")

        print(f"Export des mesures du {date_hier_str} pour {boite_id} -> {fichier_excel}")

# === Exécution principale ===
if __name__ == '__main__':
    base_dir = Path(r"C:\Users\chris\OneDrive\Bureau\Test_simulation_boitier")

    configuration_boitiers = parametres_boitiers()
    create_directories_and_files(configuration_boitiers, base_dir)
    run_simulation(configuration_boitiers, base_dir)

    # Exécuter l'export Excel à 00h01 chaque jour
    while True:
        now = datetime.now()
        if now.hour == 0 and now.minute == 1:
            export_to_excel(configuration_boitiers, base_dir)
            time.sleep(60)  # Éviter les exécutions multiples à la même minute


